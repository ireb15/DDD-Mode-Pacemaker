//VVI Pacemaker SCCharts
 scchart Mode1 {
  input signal VSense, ASense;
  output signal VPace, APace;
  output signal LRI_start, LRI_stop;
  output signal URI_start, URI_stop;
  output signal VRP_start, VRP_stop;
  output signal AVI_start, AVI_stop;
  output signal AEI_start, AEI_stop;
  output signal PVARP_start, PVARP_stop;
  input signal AVI_ex, AEI_ex, PVARP_ex, VRP_ex, URI_ex, LRI_ex;

  initial state top {

    region LRI:

    initial state init
    --> waitVRP with VSense / LRI_start
    --> waitVRP with VPace / LRI_start;

    state waitVRP
    --> waitLRI with VRP_ex;

    state waitLRI
    --> reInit with VSense / LRI_stop
    --> reInit with VPace / LRI_stop
    --> reInit with LRI_ex / VPace;

    state reInit
    --> waitVRP with / LRI_start;

    region URI:

    initial state init
    --> waitURI with VSense / URI_start
    --> waitURI with VPace / URI_start;

    state waitURI
    --> init with URI_ex / URI_stop
    --> e1 with PVARP_ex
    --> e1 with VRP_ex;

    state e1
    --> init with URI_ex / URI_stop
    --> e2 with VRP_ex / URI_stop
    --> e2 with PVARP_ex / URI_stop;

    state e2
    --> REinit with VSense / URI_stop
    --> init with URI_ex / URI_stop;

    state REinit
    --> waitURI with / URI_start;

    region LRI_timer:

    initial state idle
    --> timer with LRI_start;

    state timer "timer"
    --> idle with LRI_stop
    --> idle with LRI_ex;

    region URI_timer:

    initial state idle
    --> timer with URI_start;

    state timer "timer"
    --> idle with URI_stop
    --> idle with URI_ex;

    region VRP:

    initial state idle
    --> waitVRP with VPace / VRP_start
    --> waitVRP with VSense / VRP_start;

    state waitVRP
    --> idle with VRP_ex;

    region VRP_timer:

    initial state idle
    --> timer with VRP_start;

    state timer "timer"
    --> idle with VRP_ex
    --> idle with VRP_stop;

    region AVI:

    initial state idle
    --> waitAVI with ASense / AVI_start
    --> waitAVI with APace / AVI_start;

    state waitAVI
    --> idle with VSense / AVI_stop
    --> idle with VPace / AVI_stop
    --> e1 with AVI_ex
    --> e2 with URI_ex;

    state e1
    --> idle with URI_ex / VPace
    --> idle with VSense / AVI_stop
    --> idle with VPace / AVI_stop;

    state e2
    --> idle with AVI_ex / VPace
    --> idle with VSense / AVI_stop
    --> idle with VPace / AVI_stop;

    region AVI_timer:

    initial state idle
    --> timer with AVI_start;

    state timer "timer"
    --> idle with AVI_ex
    --> idle with AVI_stop;

    region AEI:

    initial state idle
    --> waitPVARP with VSense / AEI_start
    --> waitPVARP with VPace / AEI_start;

    state waitPVARP
    --> waitAEI with PVARP_ex;

    state waitAEI
    --> idle with ASense / AEI_stop
    --> idle with AEI_ex / APace;

    region AEI_timer:

    initial state idle
    --> timer with AEI_start;

    state timer "timer"
    --> idle with AEI_ex
    --> idle with AEI_stop;

    region PVARP:

    initial state idle
    --> waitPVARP with VSense / PVARP_start
    --> waitPVARP with VPace / PVARP_start;

    state waitPVARP
    --> idle with PVARP_ex;

    region PVARP_timer:

    initial state idle
    --> timer with PVARP_start;

    state timer "timer"
    --> idle with PVARP_ex
    --> idle with PVARP_stop;
  };
}